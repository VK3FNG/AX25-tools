// generated by Fast Light User Interface Designer (fluid) version 1.00

#include "xfhdlcst.h"

Fl_Window *hdlcst=(Fl_Window *)0;

Fl_Round_Button *dcd=(Fl_Round_Button *)0;

Fl_Round_Button *ptt=(Fl_Round_Button *)0;

Fl_Output *txpacket=(Fl_Output *)0;

Fl_Output *txerror=(Fl_Output *)0;

Fl_Output *rxpacket=(Fl_Output *)0;

Fl_Output *rxerror=(Fl_Output *)0;

Fl_Output *modcyc=(Fl_Output *)0;

Fl_Output *demodcyc=(Fl_Output *)0;

Fl_Output *intfreq=(Fl_Output *)0;

Fl_Output *dmares=(Fl_Output *)0;

Fl_Box *tmodcyc=(Fl_Box *)0;

Fl_Box *tdemodcyc=(Fl_Box *)0;

Fl_Box *tintfreq=(Fl_Box *)0;

Fl_Box *tdmares=(Fl_Box *)0;

Fl_Output *modename=(Fl_Output *)0;

Fl_Output *drivername=(Fl_Output *)0;

Fl_Button *quit=(Fl_Button *)0;

Fl_Window* create_the_forms() {
  Fl_Window* w;
  { Fl_Window* o = hdlcst = new Fl_Window(250, 300, "HDLC driver state");
    w = o;
    o->box(FL_NO_BOX);
    { Fl_Box* o = new Fl_Box(0, 0, 250, 300);
      o->box(FL_UP_BOX);
    }
    { Fl_Box* o = new Fl_Box(10, 230, 230, 60);
      o->box(FL_DOWN_BOX);
    }
    { Fl_Box* o = new Fl_Box(10, 10, 230, 220);
      o->box(FL_DOWN_BOX);
    }
    { Fl_Round_Button* o = dcd = new Fl_Round_Button(160, 20, 20, 20);
      o->down_box(FL_ROUND_DOWN_BOX);
      o->selection_color(3);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Round_Button* o = ptt = new Fl_Round_Button(160, 40, 20, 20);
      o->down_box(FL_ROUND_DOWN_BOX);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Output* o = txpacket = new Fl_Output(160, 60, 70, 20);
      o->box(FL_EMBOSSED_BOX);
      o->selection_color(49);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Output* o = txerror = new Fl_Output(160, 80, 70, 20);
      o->box(FL_EMBOSSED_BOX);
      o->selection_color(49);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Output* o = rxpacket = new Fl_Output(160, 100, 70, 20);
      o->box(FL_EMBOSSED_BOX);
      o->selection_color(49);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Output* o = rxerror = new Fl_Output(160, 120, 70, 20);
      o->box(FL_EMBOSSED_BOX);
      o->selection_color(49);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Output* o = modcyc = new Fl_Output(160, 140, 70, 20);
      o->box(FL_EMBOSSED_BOX);
      o->selection_color(49);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Output* o = demodcyc = new Fl_Output(160, 160, 70, 20);
      o->box(FL_EMBOSSED_BOX);
      o->selection_color(49);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Output* o = intfreq = new Fl_Output(160, 180, 70, 20);
      o->box(FL_EMBOSSED_BOX);
      o->selection_color(49);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Output* o = dmares = new Fl_Output(160, 200, 70, 20);
      o->box(FL_EMBOSSED_BOX);
      o->selection_color(49);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(20, 60, 110, 20, "Transmit Packets");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(20, 80, 110, 20, "Transmit Errors");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(20, 100, 110, 20, "Receive Packets");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(20, 120, 110, 20, "Receive Errors");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(20, 40, 110, 20, "PTT");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(20, 20, 110, 20, "DCD");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = tmodcyc = new Fl_Box(20, 140, 110, 20, "Modulator Cycles");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = tdemodcyc = new Fl_Box(20, 160, 110, 20, "Demodulator Cycles");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = tintfreq = new Fl_Box(20, 180, 110, 20, "Interrupt Frequency");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = tdmares = new Fl_Box(20, 200, 110, 20, "DMA residue");
      o->box(FL_FLAT_BOX);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Output* o = modename = new Fl_Output(20, 240, 210, 20);
      o->box(FL_EMBOSSED_BOX);
      o->selection_color(49);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Output* o = drivername = new Fl_Output(20, 260, 210, 20);
      o->box(FL_EMBOSSED_BOX);
      o->selection_color(49);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = quit = new Fl_Button(190, 20, 40, 30, "Quit");
      o->callback((Fl_Callback*)cb_quit, (void*)(0));
    }
    o->end();
  }
  return w;
}
